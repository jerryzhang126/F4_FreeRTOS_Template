   1              		.syntax unified
   2              		.cpu cortex-m4
   3              		.eabi_attribute 27, 3
   4              		.fpu fpv4-sp-d16
   5              		.eabi_attribute 20, 1
   6              		.eabi_attribute 21, 1
   7              		.eabi_attribute 23, 3
   8              		.eabi_attribute 24, 1
   9              		.eabi_attribute 25, 1
  10              		.eabi_attribute 26, 1
  11              		.eabi_attribute 30, 6
  12              		.eabi_attribute 18, 4
  13              		.thumb
  14              		.file	"port.c"
  22              	.Ltext0:
  23              		.cfi_sections	.debug_frame
  24              		.global	ulKernelPriority
  25              		.section	.rodata.ulKernelPriority,"a",%progbits
  26              		.align	2
  29              	ulKernelPriority:
  30 0000 FF000000 		.word	255
  31              		.section	.data.uxCriticalNesting,"aw",%progbits
  32              		.align	2
  35              	uxCriticalNesting:
  36 0000 AAAAAAAA 		.word	-1431655766
  37              		.section	.text.pxPortInitialiseStack,"ax",%progbits
  38              		.align	2
  39              		.global	pxPortInitialiseStack
  40              		.thumb
  41              		.thumb_func
  43              	pxPortInitialiseStack:
  44              	.LFB110:
  45              		.file 1 "lib/FreeRTOS/portable/GCC/ARM_CM4F/port.c"
   1:lib/FreeRTOS/portable/GCC/ARM_CM4F/port.c **** /*
   2:lib/FreeRTOS/portable/GCC/ARM_CM4F/port.c ****     FreeRTOS V7.0.2 - Copyright (C) 2011 Real Time Engineers Ltd.
   3:lib/FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 	Cortex M4F Port contributed by Thomas Kindler <mail_cm4@t-kindler.de>
   4:lib/FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 
   5:lib/FreeRTOS/portable/GCC/ARM_CM4F/port.c ****     ***************************************************************************
   6:lib/FreeRTOS/portable/GCC/ARM_CM4F/port.c ****      *                                                                       *
   7:lib/FreeRTOS/portable/GCC/ARM_CM4F/port.c ****      *    FreeRTOS tutorial books are available in pdf and paperback.        *
   8:lib/FreeRTOS/portable/GCC/ARM_CM4F/port.c ****      *    Complete, revised, and edited pdf reference manuals are also       *
   9:lib/FreeRTOS/portable/GCC/ARM_CM4F/port.c ****      *    available.                                                         *
  10:lib/FreeRTOS/portable/GCC/ARM_CM4F/port.c ****      *                                                                       *
  11:lib/FreeRTOS/portable/GCC/ARM_CM4F/port.c ****      *    Purchasing FreeRTOS documentation will not only help you, by       *
  12:lib/FreeRTOS/portable/GCC/ARM_CM4F/port.c ****      *    ensuring you get running as quickly as possible and with an        *
  13:lib/FreeRTOS/portable/GCC/ARM_CM4F/port.c ****      *    in-depth knowledge of how to use FreeRTOS, it will also help       *
  14:lib/FreeRTOS/portable/GCC/ARM_CM4F/port.c ****      *    the FreeRTOS project to continue with its mission of providing     *
  15:lib/FreeRTOS/portable/GCC/ARM_CM4F/port.c ****      *    professional grade, cross platform, de facto standard solutions    *
  16:lib/FreeRTOS/portable/GCC/ARM_CM4F/port.c ****      *    for microcontrollers - completely free of charge!                  *
  17:lib/FreeRTOS/portable/GCC/ARM_CM4F/port.c ****      *                                                                       *
  18:lib/FreeRTOS/portable/GCC/ARM_CM4F/port.c ****      *    >>> See http://www.FreeRTOS.org/Documentation for details. <<<     *
  19:lib/FreeRTOS/portable/GCC/ARM_CM4F/port.c ****      *                                                                       *
  20:lib/FreeRTOS/portable/GCC/ARM_CM4F/port.c ****      *    Thank you for using FreeRTOS, and thank you for your support!      *
  21:lib/FreeRTOS/portable/GCC/ARM_CM4F/port.c ****      *                                                                       *
  22:lib/FreeRTOS/portable/GCC/ARM_CM4F/port.c ****     ***************************************************************************
  23:lib/FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 
  24:lib/FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 
  25:lib/FreeRTOS/portable/GCC/ARM_CM4F/port.c ****     This file is part of the FreeRTOS distribution.
  26:lib/FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 
  27:lib/FreeRTOS/portable/GCC/ARM_CM4F/port.c ****     FreeRTOS is free software; you can redistribute it and/or modify it under
  28:lib/FreeRTOS/portable/GCC/ARM_CM4F/port.c ****     the terms of the GNU General Public License (version 2) as published by the
  29:lib/FreeRTOS/portable/GCC/ARM_CM4F/port.c ****     Free Software Foundation AND MODIFIED BY the FreeRTOS exception.
  30:lib/FreeRTOS/portable/GCC/ARM_CM4F/port.c ****     >>>NOTE<<< The modification to the GPL is included to allow you to
  31:lib/FreeRTOS/portable/GCC/ARM_CM4F/port.c ****     distribute a combined work that includes FreeRTOS without being obliged to
  32:lib/FreeRTOS/portable/GCC/ARM_CM4F/port.c ****     provide the source code for proprietary components outside of the FreeRTOS
  33:lib/FreeRTOS/portable/GCC/ARM_CM4F/port.c ****     kernel.  FreeRTOS is distributed in the hope that it will be useful, but
  34:lib/FreeRTOS/portable/GCC/ARM_CM4F/port.c ****     WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
  35:lib/FreeRTOS/portable/GCC/ARM_CM4F/port.c ****     or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for
  36:lib/FreeRTOS/portable/GCC/ARM_CM4F/port.c ****     more details. You should have received a copy of the GNU General Public
  37:lib/FreeRTOS/portable/GCC/ARM_CM4F/port.c ****     License and the FreeRTOS license exception along with FreeRTOS; if not it
  38:lib/FreeRTOS/portable/GCC/ARM_CM4F/port.c ****     can be viewed here: http://www.freertos.org/a00114.html and also obtained
  39:lib/FreeRTOS/portable/GCC/ARM_CM4F/port.c ****     by writing to Richard Barry, contact details for whom are available on the
  40:lib/FreeRTOS/portable/GCC/ARM_CM4F/port.c ****     FreeRTOS WEB site.
  41:lib/FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 
  42:lib/FreeRTOS/portable/GCC/ARM_CM4F/port.c ****     1 tab == 4 spaces!
  43:lib/FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 
  44:lib/FreeRTOS/portable/GCC/ARM_CM4F/port.c ****     http://www.FreeRTOS.org - Documentation, latest information, license and
  45:lib/FreeRTOS/portable/GCC/ARM_CM4F/port.c ****     contact details.
  46:lib/FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 
  47:lib/FreeRTOS/portable/GCC/ARM_CM4F/port.c ****     http://www.SafeRTOS.com - A version that is certified for use in safety
  48:lib/FreeRTOS/portable/GCC/ARM_CM4F/port.c ****     critical systems.
  49:lib/FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 
  50:lib/FreeRTOS/portable/GCC/ARM_CM4F/port.c ****     http://www.OpenRTOS.com - Commercial support, development, porting,
  51:lib/FreeRTOS/portable/GCC/ARM_CM4F/port.c ****     licensing and training services.
  52:lib/FreeRTOS/portable/GCC/ARM_CM4F/port.c **** */
  53:lib/FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 
  54:lib/FreeRTOS/portable/GCC/ARM_CM4F/port.c **** /*-----------------------------------------------------------
  55:lib/FreeRTOS/portable/GCC/ARM_CM4F/port.c ****  * Implementation of functions defined in portable.h for the ARM CM4F port.
  56:lib/FreeRTOS/portable/GCC/ARM_CM4F/port.c ****  *----------------------------------------------------------*/
  57:lib/FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 
  58:lib/FreeRTOS/portable/GCC/ARM_CM4F/port.c **** /* Scheduler includes. */
  59:lib/FreeRTOS/portable/GCC/ARM_CM4F/port.c **** #include "FreeRTOS.h"
  60:lib/FreeRTOS/portable/GCC/ARM_CM4F/port.c **** #include "task.h"
  61:lib/FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 
  62:lib/FreeRTOS/portable/GCC/ARM_CM4F/port.c **** /* For backward compatibility, ensure configKERNEL_INTERRUPT_PRIORITY is
  63:lib/FreeRTOS/portable/GCC/ARM_CM4F/port.c **** defined.  The value should also ensure backward compatibility.
  64:lib/FreeRTOS/portable/GCC/ARM_CM4F/port.c **** FreeRTOS.org versions prior to V4.4.0 did not include this definition. */
  65:lib/FreeRTOS/portable/GCC/ARM_CM4F/port.c **** #ifndef configKERNEL_INTERRUPT_PRIORITY
  66:lib/FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 	#define configKERNEL_INTERRUPT_PRIORITY 255
  67:lib/FreeRTOS/portable/GCC/ARM_CM4F/port.c **** #endif
  68:lib/FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 
  69:lib/FreeRTOS/portable/GCC/ARM_CM4F/port.c **** /* Constants required to manipulate the NVIC. */
  70:lib/FreeRTOS/portable/GCC/ARM_CM4F/port.c **** #define portNVIC_SYSTICK_CTRL		( ( volatile unsigned long *) 0xe000e010 )
  71:lib/FreeRTOS/portable/GCC/ARM_CM4F/port.c **** #define portNVIC_SYSTICK_LOAD		( ( volatile unsigned long *) 0xe000e014 )
  72:lib/FreeRTOS/portable/GCC/ARM_CM4F/port.c **** #define portNVIC_INT_CTRL			( ( volatile unsigned long *) 0xe000ed04 )
  73:lib/FreeRTOS/portable/GCC/ARM_CM4F/port.c **** #define portNVIC_SYSPRI2			( ( volatile unsigned long *) 0xe000ed20 )
  74:lib/FreeRTOS/portable/GCC/ARM_CM4F/port.c **** #define portNVIC_SYSTICK_CLK		0x00000004
  75:lib/FreeRTOS/portable/GCC/ARM_CM4F/port.c **** #define portNVIC_SYSTICK_INT		0x00000002
  76:lib/FreeRTOS/portable/GCC/ARM_CM4F/port.c **** #define portNVIC_SYSTICK_ENABLE		0x00000001
  77:lib/FreeRTOS/portable/GCC/ARM_CM4F/port.c **** #define portNVIC_PENDSVSET			0x10000000
  78:lib/FreeRTOS/portable/GCC/ARM_CM4F/port.c **** #define portNVIC_PENDSV_PRI			( ( ( unsigned long ) configKERNEL_INTERRUPT_PRIORITY ) << 16 )
  79:lib/FreeRTOS/portable/GCC/ARM_CM4F/port.c **** #define portNVIC_SYSTICK_PRI		( ( ( unsigned long ) configKERNEL_INTERRUPT_PRIORITY ) << 24 )
  80:lib/FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 
  81:lib/FreeRTOS/portable/GCC/ARM_CM4F/port.c **** /* Constants required to set up the initial stack. */
  82:lib/FreeRTOS/portable/GCC/ARM_CM4F/port.c **** #define portINITIAL_XPSR			( 0x01000000 )
  83:lib/FreeRTOS/portable/GCC/ARM_CM4F/port.c **** #define portINITIAL_EXC_RETURN		( 0xFFFFFFFD )
  84:lib/FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 
  85:lib/FreeRTOS/portable/GCC/ARM_CM4F/port.c **** /* The priority used by the kernel is assigned to a variable to make access
  86:lib/FreeRTOS/portable/GCC/ARM_CM4F/port.c **** from inline assembler easier. */
  87:lib/FreeRTOS/portable/GCC/ARM_CM4F/port.c **** const unsigned long ulKernelPriority = configKERNEL_INTERRUPT_PRIORITY;
  88:lib/FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 
  89:lib/FreeRTOS/portable/GCC/ARM_CM4F/port.c **** /* Each task maintains its own interrupt status in the critical nesting
  90:lib/FreeRTOS/portable/GCC/ARM_CM4F/port.c **** variable. */
  91:lib/FreeRTOS/portable/GCC/ARM_CM4F/port.c **** static unsigned portBASE_TYPE uxCriticalNesting = 0xaaaaaaaa;
  92:lib/FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 
  93:lib/FreeRTOS/portable/GCC/ARM_CM4F/port.c **** /*
  94:lib/FreeRTOS/portable/GCC/ARM_CM4F/port.c ****  * Setup the timer to generate the tick interrupts.
  95:lib/FreeRTOS/portable/GCC/ARM_CM4F/port.c ****  */
  96:lib/FreeRTOS/portable/GCC/ARM_CM4F/port.c **** static void prvSetupTimerInterrupt( void );
  97:lib/FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 
  98:lib/FreeRTOS/portable/GCC/ARM_CM4F/port.c **** /*
  99:lib/FreeRTOS/portable/GCC/ARM_CM4F/port.c ****  * Exception handlers.
 100:lib/FreeRTOS/portable/GCC/ARM_CM4F/port.c ****  */
 101:lib/FreeRTOS/portable/GCC/ARM_CM4F/port.c **** void xPortPendSVHandler( void ) __attribute__ (( naked ));
 102:lib/FreeRTOS/portable/GCC/ARM_CM4F/port.c **** void xPortSysTickHandler( void );
 103:lib/FreeRTOS/portable/GCC/ARM_CM4F/port.c **** void vPortSVCHandler( void ) __attribute__ (( naked ));
 104:lib/FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 
 105:lib/FreeRTOS/portable/GCC/ARM_CM4F/port.c **** /*
 106:lib/FreeRTOS/portable/GCC/ARM_CM4F/port.c ****  * Start first task is a separate function so it can be tested in isolation.
 107:lib/FreeRTOS/portable/GCC/ARM_CM4F/port.c ****  */
 108:lib/FreeRTOS/portable/GCC/ARM_CM4F/port.c **** void vPortStartFirstTask( void ) __attribute__ (( naked ));
 109:lib/FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 
 110:lib/FreeRTOS/portable/GCC/ARM_CM4F/port.c **** /*-----------------------------------------------------------*/
 111:lib/FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 
 112:lib/FreeRTOS/portable/GCC/ARM_CM4F/port.c **** /*
 113:lib/FreeRTOS/portable/GCC/ARM_CM4F/port.c ****  * See header file for description.
 114:lib/FreeRTOS/portable/GCC/ARM_CM4F/port.c ****  */
 115:lib/FreeRTOS/portable/GCC/ARM_CM4F/port.c **** portSTACK_TYPE *pxPortInitialiseStack( portSTACK_TYPE *pxTopOfStack, pdTASK_CODE pxCode, void *pvPa
 116:lib/FreeRTOS/portable/GCC/ARM_CM4F/port.c **** {
  46              		.loc 1 116 0
  47              		.cfi_startproc
  48              		@ args = 0, pretend = 0, frame = 16
  49              		@ frame_needed = 1, uses_anonymous_args = 0
  50              		@ link register save eliminated.
  51 0000 80B4     		push	{r7}
  52              	.LCFI0:
  53              		.cfi_def_cfa_offset 4
  54 0002 85B0     		sub	sp, sp, #20
  55              	.LCFI1:
  56              		.cfi_def_cfa_offset 24
  57 0004 00AF     		add	r7, sp, #0
  58              		.cfi_offset 7, -4
  59              	.LCFI2:
  60              		.cfi_def_cfa_register 7
  61 0006 F860     		str	r0, [r7, #12]
  62 0008 B960     		str	r1, [r7, #8]
  63 000a 7A60     		str	r2, [r7, #4]
 117:lib/FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 	/* Simulate the stack frame as it would be created by a context switch
 118:lib/FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 	interrupt. */
 119:lib/FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of int
  64              		.loc 1 119 0
  65 000c FB68     		ldr	r3, [r7, #12]
  66 000e A3F10403 		sub	r3, r3, #4
  67 0012 FB60     		str	r3, [r7, #12]
 120:lib/FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
  68              		.loc 1 120 0
  69 0014 FB68     		ldr	r3, [r7, #12]
  70 0016 4FF08072 		mov	r2, #16777216
  71 001a 1A60     		str	r2, [r3, #0]
 121:lib/FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 	pxTopOfStack--;
  72              		.loc 1 121 0
  73 001c FB68     		ldr	r3, [r7, #12]
  74 001e A3F10403 		sub	r3, r3, #4
  75 0022 FB60     		str	r3, [r7, #12]
 122:lib/FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 	*pxTopOfStack = ( portSTACK_TYPE ) pxCode;	/* PC */
  76              		.loc 1 122 0
  77 0024 BA68     		ldr	r2, [r7, #8]
  78 0026 FB68     		ldr	r3, [r7, #12]
  79 0028 1A60     		str	r2, [r3, #0]
 123:lib/FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 	pxTopOfStack--;
  80              		.loc 1 123 0
  81 002a FB68     		ldr	r3, [r7, #12]
  82 002c A3F10403 		sub	r3, r3, #4
  83 0030 FB60     		str	r3, [r7, #12]
 124:lib/FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 	*pxTopOfStack = 0;	/* LR */
  84              		.loc 1 124 0
  85 0032 FB68     		ldr	r3, [r7, #12]
  86 0034 4FF00002 		mov	r2, #0
  87 0038 1A60     		str	r2, [r3, #0]
 125:lib/FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
  88              		.loc 1 125 0
  89 003a FB68     		ldr	r3, [r7, #12]
  90 003c A3F11403 		sub	r3, r3, #20
  91 0040 FB60     		str	r3, [r7, #12]
 126:lib/FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 	*pxTopOfStack = ( portSTACK_TYPE ) pvParameters;	/* R0 */
  92              		.loc 1 126 0
  93 0042 7A68     		ldr	r2, [r7, #4]
  94 0044 FB68     		ldr	r3, [r7, #12]
  95 0046 1A60     		str	r2, [r3, #0]
 127:lib/FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 	pxTopOfStack -= 9;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
  96              		.loc 1 127 0
  97 0048 FB68     		ldr	r3, [r7, #12]
  98 004a A3F12403 		sub	r3, r3, #36
  99 004e FB60     		str	r3, [r7, #12]
 128:lib/FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 	*pxTopOfStack = ( portSTACK_TYPE ) portINITIAL_EXC_RETURN;
 100              		.loc 1 128 0
 101 0050 FB68     		ldr	r3, [r7, #12]
 102 0052 6FF00202 		mvn	r2, #2
 103 0056 1A60     		str	r2, [r3, #0]
 129:lib/FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 	return pxTopOfStack;
 104              		.loc 1 129 0
 105 0058 FB68     		ldr	r3, [r7, #12]
 130:lib/FreeRTOS/portable/GCC/ARM_CM4F/port.c **** }
 106              		.loc 1 130 0
 107 005a 1846     		mov	r0, r3
 108 005c 07F11407 		add	r7, r7, #20
 109 0060 BD46     		mov	sp, r7
 110 0062 80BC     		pop	{r7}
 111 0064 7047     		bx	lr
 112              		.cfi_endproc
 113              	.LFE110:
 115 0066 00BF     		.section	.text.SVC_Handler,"ax",%progbits
 116              		.align	2
 117              		.global	SVC_Handler
 118              		.thumb
 119              		.thumb_func
 121              	SVC_Handler:
 122              	.LFB111:
 131:lib/FreeRTOS/portable/GCC/ARM_CM4F/port.c **** /*-----------------------------------------------------------*/
 132:lib/FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 
 133:lib/FreeRTOS/portable/GCC/ARM_CM4F/port.c **** void vPortSVCHandler( void )
 134:lib/FreeRTOS/portable/GCC/ARM_CM4F/port.c **** {
 123              		.loc 1 134 0
 124              		.cfi_startproc
 125              		@ Naked Function: prologue and epilogue provided by programmer.
 126              		@ args = 0, pretend = 0, frame = 0
 127              		@ frame_needed = 1, uses_anonymous_args = 0
 135:lib/FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 	__asm volatile (
 128              		.loc 1 135 0
 129              	@ 135 "lib/FreeRTOS/portable/GCC/ARM_CM4F/port.c" 1
 130 0000 064B     			ldr	r3, pxCurrentTCBConst2		
 131 0002 1968     		ldr r1, [r3]					
 132 0004 0868     		ldr r0, [r1]					
 133 0006 50F804EB 		ldmia r0!, {r14}				
 134 000a B0E8F00F 		ldmia r0!, {r4-r11}				
 135 000e 80F30988 		msr psp, r0						
 136 0012 4FF00000 		mov r0, #0 						
 137 0016 80F31188 		msr	basepri, r0					
 138 001a 7047     		bx r14							
 139              										
 140              		.align 2						
 141 001c 00000000 	pxCurrentTCBConst2: .word pxCurrentTCB				
 142              	
 143              	@ 0 "" 2
 136:lib/FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 					"	ldr	r3, pxCurrentTCBConst2		\n" /* Restore the context. */
 137:lib/FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 					"	ldr r1, [r3]					\n" /* Use pxCurrentTCBConst to get the pxCurrentTCB address. */
 138:lib/FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 					"	ldr r0, [r1]					\n" /* The first item in pxCurrentTCB is the task top of stack. */
 139:lib/FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 					"	ldmia r0!, {r14}				\n" /* Pop the EXC_RETURN value */
 140:lib/FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 					"	ldmia r0!, {r4-r11}				\n" /* Pop the registers that are not automatically saved on exceptio
 141:lib/FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 					"	msr psp, r0						\n" /* Restore the task stack pointer. */
 142:lib/FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 					"	mov r0, #0 						\n"
 143:lib/FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 					"	msr	basepri, r0					\n"
 144:lib/FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 					"	bx r14							\n"
 145:lib/FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 					"									\n"
 146:lib/FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 					"	.align 2						\n"
 147:lib/FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
 148:lib/FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 				);
 149:lib/FreeRTOS/portable/GCC/ARM_CM4F/port.c **** }
 144              		.loc 1 149 0
 145              		.thumb
 146              		.cfi_endproc
 147              	.LFE111:
 149              		.section	.text.vPortStartFirstTask,"ax",%progbits
 150              		.align	2
 151              		.global	vPortStartFirstTask
 152              		.thumb
 153              		.thumb_func
 155              	vPortStartFirstTask:
 156              	.LFB112:
 150:lib/FreeRTOS/portable/GCC/ARM_CM4F/port.c **** /*-----------------------------------------------------------*/
 151:lib/FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 
 152:lib/FreeRTOS/portable/GCC/ARM_CM4F/port.c **** void vPortStartFirstTask( void )
 153:lib/FreeRTOS/portable/GCC/ARM_CM4F/port.c **** {
 157              		.loc 1 153 0
 158              		.cfi_startproc
 159              		@ Naked Function: prologue and epilogue provided by programmer.
 160              		@ args = 0, pretend = 0, frame = 0
 161              		@ frame_needed = 1, uses_anonymous_args = 0
 154:lib/FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 	__asm volatile(
 162              		.loc 1 154 0
 163              	@ 154 "lib/FreeRTOS/portable/GCC/ARM_CM4F/port.c" 1
 164 0000 0348     		 ldr r0, =0xE000ED08 	
 165 0002 0068     	 ldr r0, [r0] 			
 166 0004 0068     	 ldr r0, [r0] 			
 167 0006 80F30888 	 msr msp, r0			
 168 000a 62B6     	 cpsie i				
 169 000c 00DF     	 svc 0					
 170 000e 00BF     	 nop					
 171              	
 172              	@ 0 "" 2
 155:lib/FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 					" ldr r0, =0xE000ED08 	\n" /* Use the NVIC offset register to locate the stack. */
 156:lib/FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 					" ldr r0, [r0] 			\n"
 157:lib/FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 					" ldr r0, [r0] 			\n"
 158:lib/FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 					" msr msp, r0			\n" /* Set the msp back to the start of the stack. */
 159:lib/FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 					" cpsie i				\n" /* Globally enable interrupts. */
 160:lib/FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 					" svc 0					\n" /* System call to start first task. */
 161:lib/FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 					" nop					\n"
 162:lib/FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 				);
 163:lib/FreeRTOS/portable/GCC/ARM_CM4F/port.c **** }
 173              		.loc 1 163 0
 174              		.thumb
 175              		.cfi_endproc
 176              	.LFE112:
 178              		.section	.text.xPortStartScheduler,"ax",%progbits
 179              		.align	2
 180              		.global	xPortStartScheduler
 181              		.thumb
 182              		.thumb_func
 184              	xPortStartScheduler:
 185              	.LFB113:
 164:lib/FreeRTOS/portable/GCC/ARM_CM4F/port.c **** /*-----------------------------------------------------------*/
 165:lib/FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 
 166:lib/FreeRTOS/portable/GCC/ARM_CM4F/port.c **** /*
 167:lib/FreeRTOS/portable/GCC/ARM_CM4F/port.c ****  * See header file for description.
 168:lib/FreeRTOS/portable/GCC/ARM_CM4F/port.c ****  */
 169:lib/FreeRTOS/portable/GCC/ARM_CM4F/port.c **** portBASE_TYPE xPortStartScheduler( void )
 170:lib/FreeRTOS/portable/GCC/ARM_CM4F/port.c **** {
 186              		.loc 1 170 0
 187              		.cfi_startproc
 188              		@ args = 0, pretend = 0, frame = 0
 189              		@ frame_needed = 1, uses_anonymous_args = 0
 190 0000 80B5     		push	{r7, lr}
 191              	.LCFI3:
 192              		.cfi_def_cfa_offset 8
 193 0002 00AF     		add	r7, sp, #0
 194              		.cfi_offset 14, -4
 195              		.cfi_offset 7, -8
 196              	.LCFI4:
 197              		.cfi_def_cfa_register 7
 171:lib/FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 	/* Make PendSV, CallSV and SysTick the same priroity as the kernel. */
 172:lib/FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 	*(portNVIC_SYSPRI2) |= portNVIC_PENDSV_PRI;
 198              		.loc 1 172 0
 199 0004 0B4B     		ldr	r3, .L5
 200 0006 0B4A     		ldr	r2, .L5
 201 0008 1268     		ldr	r2, [r2, #0]
 202 000a 42F47F02 		orr	r2, r2, #16711680
 203 000e 1A60     		str	r2, [r3, #0]
 173:lib/FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 	*(portNVIC_SYSPRI2) |= portNVIC_SYSTICK_PRI;
 204              		.loc 1 173 0
 205 0010 084B     		ldr	r3, .L5
 206 0012 084A     		ldr	r2, .L5
 207 0014 1268     		ldr	r2, [r2, #0]
 208 0016 42F07F42 		orr	r2, r2, #-16777216
 209 001a 1A60     		str	r2, [r3, #0]
 174:lib/FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 
 175:lib/FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 	/* Start the timer that generates the tick ISR.  Interrupts are disabled
 176:lib/FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 	here already. */
 177:lib/FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 	prvSetupTimerInterrupt();
 210              		.loc 1 177 0
 211 001c FFF7FEFF 		bl	prvSetupTimerInterrupt
 178:lib/FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 
 179:lib/FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 	/* Initialise the critical nesting count ready for the first task. */
 180:lib/FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 	uxCriticalNesting = 0;
 212              		.loc 1 180 0
 213 0020 054B     		ldr	r3, .L5+4
 214 0022 4FF00002 		mov	r2, #0
 215 0026 1A60     		str	r2, [r3, #0]
 181:lib/FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 
 182:lib/FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 	/* Start the first task. */
 183:lib/FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 	vPortStartFirstTask();
 216              		.loc 1 183 0
 217 0028 FFF7FEFF 		bl	vPortStartFirstTask
 184:lib/FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 
 185:lib/FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 	/* Should not get here! */
 186:lib/FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 	return 0;
 218              		.loc 1 186 0
 219 002c 4FF00003 		mov	r3, #0
 187:lib/FreeRTOS/portable/GCC/ARM_CM4F/port.c **** }
 220              		.loc 1 187 0
 221 0030 1846     		mov	r0, r3
 222 0032 80BD     		pop	{r7, pc}
 223              	.L6:
 224              		.align	2
 225              	.L5:
 226 0034 20ED00E0 		.word	-536810208
 227 0038 00000000 		.word	uxCriticalNesting
 228              		.cfi_endproc
 229              	.LFE113:
 231              		.section	.text.vPortEndScheduler,"ax",%progbits
 232              		.align	2
 233              		.global	vPortEndScheduler
 234              		.thumb
 235              		.thumb_func
 237              	vPortEndScheduler:
 238              	.LFB114:
 188:lib/FreeRTOS/portable/GCC/ARM_CM4F/port.c **** /*-----------------------------------------------------------*/
 189:lib/FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 
 190:lib/FreeRTOS/portable/GCC/ARM_CM4F/port.c **** void vPortEndScheduler( void )
 191:lib/FreeRTOS/portable/GCC/ARM_CM4F/port.c **** {
 239              		.loc 1 191 0
 240              		.cfi_startproc
 241              		@ args = 0, pretend = 0, frame = 0
 242              		@ frame_needed = 1, uses_anonymous_args = 0
 243              		@ link register save eliminated.
 244 0000 80B4     		push	{r7}
 245              	.LCFI5:
 246              		.cfi_def_cfa_offset 4
 247 0002 00AF     		add	r7, sp, #0
 248              		.cfi_offset 7, -4
 249              	.LCFI6:
 250              		.cfi_def_cfa_register 7
 192:lib/FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 	/* It is unlikely that the CM4F port will require this function as there
 193:lib/FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 	is nothing to return to.  */
 194:lib/FreeRTOS/portable/GCC/ARM_CM4F/port.c **** }
 251              		.loc 1 194 0
 252 0004 BD46     		mov	sp, r7
 253 0006 80BC     		pop	{r7}
 254 0008 7047     		bx	lr
 255              		.cfi_endproc
 256              	.LFE114:
 258 000a 00BF     		.section	.text.vPortYieldFromISR,"ax",%progbits
 259              		.align	2
 260              		.global	vPortYieldFromISR
 261              		.thumb
 262              		.thumb_func
 264              	vPortYieldFromISR:
 265              	.LFB115:
 195:lib/FreeRTOS/portable/GCC/ARM_CM4F/port.c **** /*-----------------------------------------------------------*/
 196:lib/FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 
 197:lib/FreeRTOS/portable/GCC/ARM_CM4F/port.c **** void vPortYieldFromISR( void )
 198:lib/FreeRTOS/portable/GCC/ARM_CM4F/port.c **** {
 266              		.loc 1 198 0
 267              		.cfi_startproc
 268              		@ args = 0, pretend = 0, frame = 0
 269              		@ frame_needed = 1, uses_anonymous_args = 0
 270              		@ link register save eliminated.
 271 0000 80B4     		push	{r7}
 272              	.LCFI7:
 273              		.cfi_def_cfa_offset 4
 274 0002 00AF     		add	r7, sp, #0
 275              		.cfi_offset 7, -4
 276              	.LCFI8:
 277              		.cfi_def_cfa_register 7
 199:lib/FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 	/* Set a PendSV to request a context switch. */
 200:lib/FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 	*(portNVIC_INT_CTRL) = portNVIC_PENDSVSET;
 278              		.loc 1 200 0
 279 0004 034B     		ldr	r3, .L9
 280 0006 4FF08052 		mov	r2, #268435456
 281 000a 1A60     		str	r2, [r3, #0]
 201:lib/FreeRTOS/portable/GCC/ARM_CM4F/port.c **** }
 282              		.loc 1 201 0
 283 000c BD46     		mov	sp, r7
 284 000e 80BC     		pop	{r7}
 285 0010 7047     		bx	lr
 286              	.L10:
 287 0012 00BF     		.align	2
 288              	.L9:
 289 0014 04ED00E0 		.word	-536810236
 290              		.cfi_endproc
 291              	.LFE115:
 293              		.section	.text.vPortEnterCritical,"ax",%progbits
 294              		.align	2
 295              		.global	vPortEnterCritical
 296              		.thumb
 297              		.thumb_func
 299              	vPortEnterCritical:
 300              	.LFB116:
 202:lib/FreeRTOS/portable/GCC/ARM_CM4F/port.c **** /*-----------------------------------------------------------*/
 203:lib/FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 
 204:lib/FreeRTOS/portable/GCC/ARM_CM4F/port.c **** void vPortEnterCritical( void )
 205:lib/FreeRTOS/portable/GCC/ARM_CM4F/port.c **** {
 301              		.loc 1 205 0
 302              		.cfi_startproc
 303              		@ args = 0, pretend = 0, frame = 0
 304              		@ frame_needed = 1, uses_anonymous_args = 0
 305              		@ link register save eliminated.
 306 0000 80B4     		push	{r7}
 307              	.LCFI9:
 308              		.cfi_def_cfa_offset 4
 309 0002 00AF     		add	r7, sp, #0
 310              		.cfi_offset 7, -4
 311              	.LCFI10:
 312              		.cfi_def_cfa_register 7
 206:lib/FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 	portDISABLE_INTERRUPTS();
 313              		.loc 1 206 0
 314              	@ 206 "lib/FreeRTOS/portable/GCC/ARM_CM4F/port.c" 1
 315 0004 4FF0BF00 			mov r0, #191								
 316 0008 80F31188 		msr basepri, r0							
 317              	
 318              	@ 0 "" 2
 207:lib/FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 	uxCriticalNesting++;
 319              		.loc 1 207 0
 320              		.thumb
 321 000c 044B     		ldr	r3, .L12
 322 000e 1B68     		ldr	r3, [r3, #0]
 323 0010 03F10102 		add	r2, r3, #1
 324 0014 024B     		ldr	r3, .L12
 325 0016 1A60     		str	r2, [r3, #0]
 208:lib/FreeRTOS/portable/GCC/ARM_CM4F/port.c **** }
 326              		.loc 1 208 0
 327 0018 BD46     		mov	sp, r7
 328 001a 80BC     		pop	{r7}
 329 001c 7047     		bx	lr
 330              	.L13:
 331 001e 00BF     		.align	2
 332              	.L12:
 333 0020 00000000 		.word	uxCriticalNesting
 334              		.cfi_endproc
 335              	.LFE116:
 337              		.section	.text.vPortExitCritical,"ax",%progbits
 338              		.align	2
 339              		.global	vPortExitCritical
 340              		.thumb
 341              		.thumb_func
 343              	vPortExitCritical:
 344              	.LFB117:
 209:lib/FreeRTOS/portable/GCC/ARM_CM4F/port.c **** /*-----------------------------------------------------------*/
 210:lib/FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 
 211:lib/FreeRTOS/portable/GCC/ARM_CM4F/port.c **** void vPortExitCritical( void )
 212:lib/FreeRTOS/portable/GCC/ARM_CM4F/port.c **** {
 345              		.loc 1 212 0
 346              		.cfi_startproc
 347              		@ args = 0, pretend = 0, frame = 0
 348              		@ frame_needed = 1, uses_anonymous_args = 0
 349              		@ link register save eliminated.
 350 0000 80B4     		push	{r7}
 351              	.LCFI11:
 352              		.cfi_def_cfa_offset 4
 353 0002 00AF     		add	r7, sp, #0
 354              		.cfi_offset 7, -4
 355              	.LCFI12:
 356              		.cfi_def_cfa_register 7
 213:lib/FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 	uxCriticalNesting--;
 357              		.loc 1 213 0
 358 0004 084B     		ldr	r3, .L16
 359 0006 1B68     		ldr	r3, [r3, #0]
 360 0008 03F1FF32 		add	r2, r3, #-1
 361 000c 064B     		ldr	r3, .L16
 362 000e 1A60     		str	r2, [r3, #0]
 214:lib/FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 	if( uxCriticalNesting == 0 )
 363              		.loc 1 214 0
 364 0010 054B     		ldr	r3, .L16
 365 0012 1B68     		ldr	r3, [r3, #0]
 366 0014 002B     		cmp	r3, #0
 367 0016 03D1     		bne	.L14
 215:lib/FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 	{
 216:lib/FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 		portENABLE_INTERRUPTS();
 368              		.loc 1 216 0
 369              	@ 216 "lib/FreeRTOS/portable/GCC/ARM_CM4F/port.c" 1
 370 0018 4FF00000 			mov r0, #0					
 371 001c 80F31188 		msr basepri, r0				
 372              	
 373              	@ 0 "" 2
 374              		.thumb
 375              	.L14:
 217:lib/FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 	}
 218:lib/FreeRTOS/portable/GCC/ARM_CM4F/port.c **** }
 376              		.loc 1 218 0
 377 0020 BD46     		mov	sp, r7
 378 0022 80BC     		pop	{r7}
 379 0024 7047     		bx	lr
 380              	.L17:
 381 0026 00BF     		.align	2
 382              	.L16:
 383 0028 00000000 		.word	uxCriticalNesting
 384              		.cfi_endproc
 385              	.LFE117:
 387              		.section	.text.PendSV_Handler,"ax",%progbits
 388              		.align	2
 389              		.global	PendSV_Handler
 390              		.thumb
 391              		.thumb_func
 393              	PendSV_Handler:
 394              	.LFB118:
 219:lib/FreeRTOS/portable/GCC/ARM_CM4F/port.c **** /*-----------------------------------------------------------*/
 220:lib/FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 
 221:lib/FreeRTOS/portable/GCC/ARM_CM4F/port.c **** void xPortPendSVHandler( void )
 222:lib/FreeRTOS/portable/GCC/ARM_CM4F/port.c **** {
 395              		.loc 1 222 0
 396              		.cfi_startproc
 397              		@ Naked Function: prologue and epilogue provided by programmer.
 398              		@ args = 0, pretend = 0, frame = 0
 399              		@ frame_needed = 1, uses_anonymous_args = 0
 223:lib/FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 	/* This is a naked function. */
 224:lib/FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 
 225:lib/FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 	__asm volatile
 400              		.loc 1 225 0
 401              	@ 225 "lib/FreeRTOS/portable/GCC/ARM_CM4F/port.c" 1
 402 0000 EFF30980 			mrs r0, psp							
 403              											
 404 0004 134B     		ldr	r3, pxCurrentTCBConst			
 405 0006 1A68     		ldr	r2, [r3]						
 406              											
 407 0008 20E9F00F 		stmdb r0!, {r4-r11}					
 408 000c 1EF0100F 		tst r14, #0x10						
 409 0010 08BF     		it eq								
 410 0012 20ED108A 		vstmdbeq r0!, {s16-s31}				
 411 0016 40F804ED 		stmdb r0!, {r14}					
 412 001a 1060     		str r0, [r2]						
 413              											
 414 001c 2DE90840 		stmdb sp!, {r3, r14}				
 415 0020 4FF0BF00 		mov r0, #191							
 416 0024 80F31188 		msr basepri, r0						
 417 0028 FFF7FEFF 		bl vTaskSwitchContext				
 418 002c 4FF00000 		mov r0, #0							
 419 0030 80F31188 		msr basepri, r0						
 420 0034 BDE80840 		ldmia sp!, {r3, r14}				
 421              											
 422 0038 1968     		ldr r1, [r3]						
 423 003a 0868     		ldr r0, [r1]						
 424 003c 50F804EB 		ldmia r0!, {r14}					
 425 0040 1EF0100F 		tst r14, #0x10						
 426 0044 08BF     		it eq								
 427 0046 B0EC108A 		vldmiaeq r0!, {s16-s31}				
 428 004a B0E8F00F 		ldmia r0!, {r4-r11}					
 429 004e 80F30988 		msr psp, r0							
 430 0052 7047     		bx r14								
 431              											
 432              		.align 2							
 433 0054 00000000 	pxCurrentTCBConst: .word pxCurrentTCB	
 434              	
 435              	@ 0 "" 2
 226:lib/FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 	(
 227:lib/FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 	"	mrs r0, psp							\n"
 228:lib/FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 	"										\n"
 229:lib/FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 	"	ldr	r3, pxCurrentTCBConst			\n" /* Get the location of the current TCB. */
 230:lib/FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 	"	ldr	r2, [r3]						\n"
 231:lib/FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 	"										\n"
 232:lib/FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 	"	stmdb r0!, {r4-r11}					\n" /* Save the remaining registers. */
 233:lib/FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 	"	tst r14, #0x10						\n"	/* Check for extended frame.. */
 234:lib/FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 	"	it eq								\n"
 235:lib/FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 	"	vstmdbeq r0!, {s16-s31}				\n"	/* Save the high FPU registers (will also trigger a lazy-save) */
 236:lib/FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 	"	stmdb r0!, {r14}					\n"	/* Save the EXC_RETURN value */
 237:lib/FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 	"	str r0, [r2]						\n" /* Save the new top of stack into the first member of the TCB. */
 238:lib/FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 	"										\n"
 239:lib/FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 	"	stmdb sp!, {r3, r14}				\n"
 240:lib/FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 	"	mov r0, %0							\n"
 241:lib/FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 	"	msr basepri, r0						\n"
 242:lib/FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 	"	bl vTaskSwitchContext				\n"
 243:lib/FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 	"	mov r0, #0							\n"
 244:lib/FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 	"	msr basepri, r0						\n"
 245:lib/FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 	"	ldmia sp!, {r3, r14}				\n"
 246:lib/FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 	"										\n"	/* Restore the context, including the critical nesting count. */
 247:lib/FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 	"	ldr r1, [r3]						\n"
 248:lib/FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 	"	ldr r0, [r1]						\n" /* The first item in pxCurrentTCB is the task top of stack. */
 249:lib/FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 	"	ldmia r0!, {r14}					\n"	/* Pop the EXC_RETURN value */
 250:lib/FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 	"	tst r14, #0x10						\n"	/* Check for extended frame.. */
 251:lib/FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 	"	it eq								\n"
 252:lib/FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 	"	vldmiaeq r0!, {s16-s31}				\n"	/* Pop the high FPU registers.*/
 253:lib/FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 	"	ldmia r0!, {r4-r11}					\n" /* Pop the registers. */
 254:lib/FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 	"	msr psp, r0							\n"
 255:lib/FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 	"	bx r14								\n"
 256:lib/FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 	"										\n"
 257:lib/FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 	"	.align 2							\n"
 258:lib/FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
 259:lib/FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
 260:lib/FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 	);
 261:lib/FreeRTOS/portable/GCC/ARM_CM4F/port.c **** }
 436              		.loc 1 261 0
 437              		.thumb
 438              		.cfi_endproc
 439              	.LFE118:
 441              		.section	.text.SysTick_Handler,"ax",%progbits
 442              		.align	2
 443              		.global	SysTick_Handler
 444              		.thumb
 445              		.thumb_func
 447              	SysTick_Handler:
 448              	.LFB119:
 262:lib/FreeRTOS/portable/GCC/ARM_CM4F/port.c **** /*-----------------------------------------------------------*/
 263:lib/FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 
 264:lib/FreeRTOS/portable/GCC/ARM_CM4F/port.c **** void xPortSysTickHandler( void )
 265:lib/FreeRTOS/portable/GCC/ARM_CM4F/port.c **** {
 449              		.loc 1 265 0
 450              		.cfi_startproc
 451              		@ args = 0, pretend = 0, frame = 8
 452              		@ frame_needed = 1, uses_anonymous_args = 0
 453 0000 80B5     		push	{r7, lr}
 454              	.LCFI13:
 455              		.cfi_def_cfa_offset 8
 456 0002 82B0     		sub	sp, sp, #8
 457              	.LCFI14:
 458              		.cfi_def_cfa_offset 16
 459 0004 00AF     		add	r7, sp, #0
 460              		.cfi_offset 14, -4
 461              		.cfi_offset 7, -8
 462              	.LCFI15:
 463              		.cfi_def_cfa_register 7
 266:lib/FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 
 267:lib/FreeRTOS/portable/GCC/ARM_CM4F/port.c ****   Time_Update();
 464              		.loc 1 267 0
 465 0006 FFF7FEFF 		bl	Time_Update
 268:lib/FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 
 269:lib/FreeRTOS/portable/GCC/ARM_CM4F/port.c ****     unsigned long ulDummy;
 270:lib/FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 
 271:lib/FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 	/* If using preemption, also force a context switch. */
 272:lib/FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 	#if configUSE_PREEMPTION == 1
 273:lib/FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 		*(portNVIC_INT_CTRL) = portNVIC_PENDSVSET;
 466              		.loc 1 273 0
 467 000a 0A4B     		ldr	r3, .L20
 468 000c 4FF08052 		mov	r2, #268435456
 469 0010 1A60     		str	r2, [r3, #0]
 274:lib/FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 	#endif
 275:lib/FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 
 276:lib/FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 	ulDummy = portSET_INTERRUPT_MASK_FROM_ISR();
 470              		.loc 1 276 0
 471 0012 4FF00003 		mov	r3, #0
 472 0016 7B60     		str	r3, [r7, #4]
 473              	@ 276 "lib/FreeRTOS/portable/GCC/ARM_CM4F/port.c" 1
 474 0018 4FF0BF00 			mov r0, #191								
 475 001c 80F31188 		msr basepri, r0							
 476              	
 477              	@ 0 "" 2
 277:lib/FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 	{
 278:lib/FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 		vTaskIncrementTick();
 478              		.loc 1 278 0
 479              		.thumb
 480 0020 FFF7FEFF 		bl	vTaskIncrementTick
 279:lib/FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 	}
 280:lib/FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 	portCLEAR_INTERRUPT_MASK_FROM_ISR( ulDummy );
 481              		.loc 1 280 0
 482              	@ 280 "lib/FreeRTOS/portable/GCC/ARM_CM4F/port.c" 1
 483 0024 4FF00000 			mov r0, #0					
 484 0028 80F31188 		msr basepri, r0				
 485              	
 486              	@ 0 "" 2
 281:lib/FreeRTOS/portable/GCC/ARM_CM4F/port.c **** }
 487              		.loc 1 281 0
 488              		.thumb
 489 002c 07F10807 		add	r7, r7, #8
 490 0030 BD46     		mov	sp, r7
 491 0032 80BD     		pop	{r7, pc}
 492              	.L21:
 493              		.align	2
 494              	.L20:
 495 0034 04ED00E0 		.word	-536810236
 496              		.cfi_endproc
 497              	.LFE119:
 499              		.section	.text.prvSetupTimerInterrupt,"ax",%progbits
 500              		.align	2
 501              		.thumb
 502              		.thumb_func
 504              	prvSetupTimerInterrupt:
 505              	.LFB120:
 282:lib/FreeRTOS/portable/GCC/ARM_CM4F/port.c **** /*-----------------------------------------------------------*/
 283:lib/FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 
 284:lib/FreeRTOS/portable/GCC/ARM_CM4F/port.c **** /*
 285:lib/FreeRTOS/portable/GCC/ARM_CM4F/port.c ****  * Setup the systick timer to generate the tick interrupts at the required
 286:lib/FreeRTOS/portable/GCC/ARM_CM4F/port.c ****  * frequency.
 287:lib/FreeRTOS/portable/GCC/ARM_CM4F/port.c ****  */
 288:lib/FreeRTOS/portable/GCC/ARM_CM4F/port.c **** void prvSetupTimerInterrupt( void )
 289:lib/FreeRTOS/portable/GCC/ARM_CM4F/port.c **** {
 506              		.loc 1 289 0
 507              		.cfi_startproc
 508              		@ args = 0, pretend = 0, frame = 0
 509              		@ frame_needed = 1, uses_anonymous_args = 0
 510              		@ link register save eliminated.
 511 0000 80B4     		push	{r7}
 512              	.LCFI16:
 513              		.cfi_def_cfa_offset 4
 514 0002 00AF     		add	r7, sp, #0
 515              		.cfi_offset 7, -4
 516              	.LCFI17:
 517              		.cfi_def_cfa_register 7
 290:lib/FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 	/* Configure SysTick to interrupt at the requested rate. */
 291:lib/FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 	*(portNVIC_SYSTICK_LOAD) = ( configCPU_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 518              		.loc 1 291 0
 519 0004 084B     		ldr	r3, .L23
 520 0006 094A     		ldr	r2, .L23+4
 521 0008 1168     		ldr	r1, [r2, #0]
 522 000a 094A     		ldr	r2, .L23+8
 523 000c A2FB0102 		umull	r0, r2, r2, r1
 524 0010 4FEA9212 		lsr	r2, r2, #6
 525 0014 02F1FF32 		add	r2, r2, #-1
 526 0018 1A60     		str	r2, [r3, #0]
 292:lib/FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 	*(portNVIC_SYSTICK_CTRL) = portNVIC_SYSTICK_CLK | portNVIC_SYSTICK_INT | portNVIC_SYSTICK_ENABLE;
 527              		.loc 1 292 0
 528 001a 064B     		ldr	r3, .L23+12
 529 001c 4FF00702 		mov	r2, #7
 530 0020 1A60     		str	r2, [r3, #0]
 293:lib/FreeRTOS/portable/GCC/ARM_CM4F/port.c **** }
 531              		.loc 1 293 0
 532 0022 BD46     		mov	sp, r7
 533 0024 80BC     		pop	{r7}
 534 0026 7047     		bx	lr
 535              	.L24:
 536              		.align	2
 537              	.L23:
 538 0028 14E000E0 		.word	-536813548
 539 002c 00000000 		.word	SystemCoreClock
 540 0030 D34D6210 		.word	274877907
 541 0034 10E000E0 		.word	-536813552
 542              		.cfi_endproc
 543              	.LFE120:
 545              		.text
 546              	.Letext0:
DEFINED SYMBOLS
                            *ABS*:00000000 port.c
C:\Users\junpei\AppData\Local\Temp\cceGaxT7.s:29     .rodata.ulKernelPriority:00000000 ulKernelPriority
C:\Users\junpei\AppData\Local\Temp\cceGaxT7.s:26     .rodata.ulKernelPriority:00000000 $d
C:\Users\junpei\AppData\Local\Temp\cceGaxT7.s:32     .data.uxCriticalNesting:00000000 $d
C:\Users\junpei\AppData\Local\Temp\cceGaxT7.s:35     .data.uxCriticalNesting:00000000 uxCriticalNesting
C:\Users\junpei\AppData\Local\Temp\cceGaxT7.s:38     .text.pxPortInitialiseStack:00000000 $t
C:\Users\junpei\AppData\Local\Temp\cceGaxT7.s:43     .text.pxPortInitialiseStack:00000000 pxPortInitialiseStack
C:\Users\junpei\AppData\Local\Temp\cceGaxT7.s:116    .text.SVC_Handler:00000000 $t
C:\Users\junpei\AppData\Local\Temp\cceGaxT7.s:121    .text.SVC_Handler:00000000 SVC_Handler
C:\Users\junpei\AppData\Local\Temp\cceGaxT7.s:141    .text.SVC_Handler:0000001c pxCurrentTCBConst2
C:\Users\junpei\AppData\Local\Temp\cceGaxT7.s:141    .text.SVC_Handler:0000001c $d
C:\Users\junpei\AppData\Local\Temp\cceGaxT7.s:150    .text.vPortStartFirstTask:00000000 $t
C:\Users\junpei\AppData\Local\Temp\cceGaxT7.s:155    .text.vPortStartFirstTask:00000000 vPortStartFirstTask
C:\Users\junpei\AppData\Local\Temp\cceGaxT7.s:179    .text.xPortStartScheduler:00000000 $t
C:\Users\junpei\AppData\Local\Temp\cceGaxT7.s:184    .text.xPortStartScheduler:00000000 xPortStartScheduler
C:\Users\junpei\AppData\Local\Temp\cceGaxT7.s:504    .text.prvSetupTimerInterrupt:00000000 prvSetupTimerInterrupt
C:\Users\junpei\AppData\Local\Temp\cceGaxT7.s:226    .text.xPortStartScheduler:00000034 $d
C:\Users\junpei\AppData\Local\Temp\cceGaxT7.s:232    .text.vPortEndScheduler:00000000 $t
C:\Users\junpei\AppData\Local\Temp\cceGaxT7.s:237    .text.vPortEndScheduler:00000000 vPortEndScheduler
C:\Users\junpei\AppData\Local\Temp\cceGaxT7.s:259    .text.vPortYieldFromISR:00000000 $t
C:\Users\junpei\AppData\Local\Temp\cceGaxT7.s:264    .text.vPortYieldFromISR:00000000 vPortYieldFromISR
C:\Users\junpei\AppData\Local\Temp\cceGaxT7.s:289    .text.vPortYieldFromISR:00000014 $d
C:\Users\junpei\AppData\Local\Temp\cceGaxT7.s:294    .text.vPortEnterCritical:00000000 $t
C:\Users\junpei\AppData\Local\Temp\cceGaxT7.s:299    .text.vPortEnterCritical:00000000 vPortEnterCritical
C:\Users\junpei\AppData\Local\Temp\cceGaxT7.s:333    .text.vPortEnterCritical:00000020 $d
C:\Users\junpei\AppData\Local\Temp\cceGaxT7.s:338    .text.vPortExitCritical:00000000 $t
C:\Users\junpei\AppData\Local\Temp\cceGaxT7.s:343    .text.vPortExitCritical:00000000 vPortExitCritical
C:\Users\junpei\AppData\Local\Temp\cceGaxT7.s:383    .text.vPortExitCritical:00000028 $d
C:\Users\junpei\AppData\Local\Temp\cceGaxT7.s:388    .text.PendSV_Handler:00000000 $t
C:\Users\junpei\AppData\Local\Temp\cceGaxT7.s:393    .text.PendSV_Handler:00000000 PendSV_Handler
C:\Users\junpei\AppData\Local\Temp\cceGaxT7.s:433    .text.PendSV_Handler:00000054 pxCurrentTCBConst
C:\Users\junpei\AppData\Local\Temp\cceGaxT7.s:433    .text.PendSV_Handler:00000054 $d
C:\Users\junpei\AppData\Local\Temp\cceGaxT7.s:442    .text.SysTick_Handler:00000000 $t
C:\Users\junpei\AppData\Local\Temp\cceGaxT7.s:447    .text.SysTick_Handler:00000000 SysTick_Handler
C:\Users\junpei\AppData\Local\Temp\cceGaxT7.s:495    .text.SysTick_Handler:00000034 $d
C:\Users\junpei\AppData\Local\Temp\cceGaxT7.s:500    .text.prvSetupTimerInterrupt:00000000 $t
C:\Users\junpei\AppData\Local\Temp\cceGaxT7.s:538    .text.prvSetupTimerInterrupt:00000028 $d
C:\Users\junpei\AppData\Local\Temp\cceGaxT7.s:178    .text.vPortStartFirstTask:00000010 $d
                     .debug_frame:00000010 $d

UNDEFINED SYMBOLS
pxCurrentTCB
vTaskSwitchContext
Time_Update
vTaskIncrementTick
SystemCoreClock
